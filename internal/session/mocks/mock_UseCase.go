// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, email, password
func (_m *MockUseCase) Create(ctx context.Context, email string, password string) (uuid.UUID, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (uuid.UUID, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uuid.UUID); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockUseCase_Expecter) Create(ctx interface{}, email interface{}, password interface{}) *MockUseCase_Create_Call {
	return &MockUseCase_Create_Call{Call: _e.mock.On("Create", ctx, email, password)}
}

func (_c *MockUseCase_Create_Call) Run(run func(ctx context.Context, email string, password string)) *MockUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUseCase_Create_Call) Return(_a0 uuid.UUID, _a1 error) *MockUseCase_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_Create_Call) RunAndReturn(run func(context.Context, string, string) (uuid.UUID, error)) *MockUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, sessionID, userID
func (_m *MockUseCase) Delete(ctx context.Context, sessionID uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(ctx, sessionID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, sessionID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
//   - userID uuid.UUID
func (_e *MockUseCase_Expecter) Delete(ctx interface{}, sessionID interface{}, userID interface{}) *MockUseCase_Delete_Call {
	return &MockUseCase_Delete_Call{Call: _e.mock.On("Delete", ctx, sessionID, userID)}
}

func (_c *MockUseCase_Delete_Call) Run(run func(ctx context.Context, sessionID uuid.UUID, userID uuid.UUID)) *MockUseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockUseCase_Delete_Call) Return(_a0 error) *MockUseCase_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockUseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
